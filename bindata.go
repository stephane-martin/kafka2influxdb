// Code generated by go-bindata.
// sources:
// kafka2influxdb.service
// kafka2influxdb.upstart
// kafka2influxdb.default
// docs/kafka2influxdb.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kafka2influxdbService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x6e\xdb\x30\x10\x84\xef\x7c\x0a\x21\xe8\x55\x51\xdb\x43\x0f\x05\x78\x08\x6a\xd9\x35\xea\xb8\x41\x24\x17\x05\x82\x20\xa0\xa9\x95\xbc\xc8\xf2\x07\xdc\xa5\x6a\xbf\x7d\x21\x3b\xb9\xc8\x39\x91\xfb\x91\x33\xb3\x98\xa7\x9d\x47\x79\x56\x0b\x60\x9b\x30\x0a\x06\xaf\x5f\x4d\xff\x6a\xbe\xa2\xef\x29\x1f\xbb\xbd\x5a\x04\x9b\x1d\x78\x31\xe7\xc7\x83\x48\xe4\xef\x55\x35\xa0\x1c\xf2\xfe\xd6\x06\x57\xb1\x40\x3c\x18\x0f\xa5\x33\x49\xd0\x57\x33\xfd\x8f\xe0\x3b\x9c\xb4\x0f\x46\x0e\xf5\x11\x59\x58\x57\x20\x76\xf6\x6f\x36\xde\x4a\x70\xa4\xd4\x53\x03\x69\x44\x0b\xcf\xaa\x3d\x45\xd0\x8c\x2e\x12\xa8\xda\x8f\x98\x82\x9f\xb6\x5a\x22\xc1\xc5\xae\x83\xde\x64\x92\x79\xfc\x8e\x21\xe9\x97\x19\x5c\xa5\x90\xe3\x15\x7d\x48\x38\x1a\x81\x05\x4c\x89\xac\x4f\xc0\xef\xa8\x75\xf1\x6d\x0c\x02\x56\x9a\x13\x0b\x38\xdd\x67\xa2\x77\xf4\x33\x38\xd0\x92\x32\xa8\x6d\xd8\xc2\xbf\x49\x87\x04\x03\xf0\x05\x3e\x02\x4b\x42\x2b\x77\x5d\x97\x80\x79\x69\x1c\x12\x02\xeb\xbb\xe5\xcb\x7a\x5b\xb7\xc5\xdb\xf9\x6d\xba\xec\xb6\xeb\xbf\xaa\x3e\x82\x6d\xc4\x24\xd1\x55\xe6\x54\x51\xb0\x86\xaa\xfd\x55\xbb\x45\x59\xda\xe0\x7b\x1c\xf4\xcd\x07\x9d\xde\x14\x3c\x59\x14\x65\x49\x61\xe8\xa7\xa6\x3e\x6d\x7e\xaf\x96\xeb\x4d\x7d\x41\x04\x23\xd0\x99\x6d\xea\x3f\xf5\xa6\x50\xbf\x90\xe8\x3e\x74\xa0\x63\x0a\x16\x98\xcf\xa0\xc1\xc1\x1b\xd2\xcd\x7a\xd5\xd6\x8f\xf7\xaa\x45\x07\x21\x4b\x03\x56\x7f\xf9\xac\x94\xfa\x1f\x00\x00\xff\xff\x66\xd5\xca\xb4\x42\x02\x00\x00")

func kafka2influxdbServiceBytes() ([]byte, error) {
	return bindataRead(
		_kafka2influxdbService,
		"kafka2influxdb.service",
	)
}

func kafka2influxdbService() (*asset, error) {
	bytes, err := kafka2influxdbServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kafka2influxdb.service", size: 578, mode: os.FileMode(436), modTime: time.Unix(1490827739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kafka2influxdbUpstart = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4b\xfb\x40\x10\xc5\xcf\x9d\x4f\x31\xff\xf2\x3f\xe8\x61\x5d\xad\x7a\xec\x31\x96\x42\x44\x50\xf1\x22\x22\xdb\xdd\x49\x58\x3a\x9d\x0d\xd9\xd9\x52\xbf\xbd\x24\x11\xc5\xe0\x1c\x7f\x6f\x78\xbc\xf7\x02\x65\xdf\xc7\x4e\x63\x12\x5c\xee\x5d\xb3\x77\xab\x28\x0d\x97\x53\xd8\x2d\x01\xb2\xba\x5e\x31\x09\x9e\x09\xa9\x09\x74\x8c\x9e\x4c\xe9\x00\xbf\xcf\x49\x40\x4e\xde\xb1\x69\x22\x53\xfe\xc8\x4a\x87\x3c\xd3\xfb\x22\x4c\x47\x62\x7c\x5d\x5d\xdf\xdc\xbe\x9d\x43\xd6\xd4\x0d\xae\x3f\xc2\xbf\x51\x01\xf0\x49\x72\x62\x42\x4e\x2d\x64\xd2\x12\x03\xbe\xff\x4e\x35\xe0\xf6\x0f\xbc\x8f\xcc\x98\x63\x2b\x8e\xf1\x69\xbb\x79\xae\x1e\xef\x27\xa6\xf1\x40\xa9\x28\x5e\x5d\x02\x4c\x5d\x61\x71\x81\x96\xd4\xdb\x40\x8d\x2b\xac\x76\x66\xb5\xa0\x13\x79\xb4\x25\xf7\x76\xac\x66\x77\x51\x66\x3f\x68\x8c\x4f\xd2\xc4\x76\xbd\x1c\x9d\x66\xcb\xe1\x34\x9c\x31\x9c\xda\x61\x97\xf5\xff\xfa\x61\x73\xb7\xad\xab\x09\x8d\xa5\x47\x56\x57\x2f\x55\x0d\x24\x01\xbf\xa2\xc1\x67\x00\x00\x00\xff\xff\xe3\x80\x0b\x24\x91\x01\x00\x00")

func kafka2influxdbUpstartBytes() ([]byte, error) {
	return bindataRead(
		_kafka2influxdbUpstart,
		"kafka2influxdb.upstart",
	)
}

func kafka2influxdbUpstart() (*asset, error) {
	bytes, err := kafka2influxdbUpstartBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kafka2influxdb.upstart", size: 401, mode: os.FileMode(436), modTime: time.Unix(1490827750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kafka2influxdbDefault = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xf1\x77\x77\xf3\xf4\x71\xb5\xd5\x2f\x4b\x2c\xd2\xcf\xc9\x4f\xd7\xcf\x4e\x4c\xcb\x4e\x34\xca\xcc\x4b\xcb\x29\xad\x48\x49\x42\xe3\xea\xe5\xe4\xa7\x73\xf9\xf8\xbb\xfb\xb8\x86\xb9\xfa\xd8\x66\xe6\xa5\xe5\x73\x71\x01\x02\x00\x00\xff\xff\xb2\x56\x78\x49\x42\x00\x00\x00")

func kafka2influxdbDefaultBytes() ([]byte, error) {
	return bindataRead(
		_kafka2influxdbDefault,
		"kafka2influxdb.default",
	)
}

func kafka2influxdbDefault() (*asset, error) {
	bytes, err := kafka2influxdbDefaultBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kafka2influxdb.default", size: 66, mode: os.FileMode(436), modTime: time.Unix(1490798997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsKafka2influxdb1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xcb\x6e\xeb\x36\x10\xdd\xf3\x2b\x06\x5e\xdd\x02\xb1\xf2\x58\xb4\x40\x81\x2e\x1c\xdb\xb7\x56\xeb\x87\x60\xb9\x8f\x0b\xcb\x8b\xb1\x34\x92\x89\x50\xa4\x40\x52\x49\xdc\x3f\xea\x77\xf4\xc7\x0a\x4a\xf2\x43\x8e\x9c\xde\x0b\x34\x80\x16\xc2\x70\x78\x0e\x39\x73\xce\xd0\x8b\x7a\x30\x28\xad\xca\xd1\xf2\x18\x85\xd8\x43\x46\x92\x34\x5a\x4a\x60\xbb\x87\x00\x65\xa2\x62\xb8\xf7\xee\xbf\xf7\xee\xbc\x07\xe6\x45\x3d\xe6\xad\x26\xd0\x7b\xc2\xf4\x09\x1f\xb8\x4c\x45\xf9\x9a\x6c\x7b\xd0\xbb\xef\x41\x6f\x86\x3a\xde\xc1\xc3\xdd\xfd\x0f\x3d\xe8\xb9\x8f\x79\xbb\x3d\xf3\xc2\x09\xcc\x07\xb3\x31\xf3\x82\x80\xb5\xf7\x41\xb4\x26\xb9\x81\xa2\x14\x02\x72\xb2\x9a\xc7\x06\x8c\x55\x9a\x12\xe0\x12\x7e\x75\xb9\x60\x55\xe1\xc2\x28\x13\x28\x4a\xb3\x03\xbb\xa3\x9c\x59\x05\x7e\x85\x31\x7a\xac\xf0\xc3\x2f\xf3\x45\x10\xfa\x61\xc5\x11\xa5\xeb\xc7\x4d\x9b\x28\x4a\xd7\x1b\x58\x57\x0b\x51\x3f\xea\xc7\x4a\xa6\x3c\x73\xc1\x9f\xaa\xd8\xc8\x5f\x8e\x87\xab\xc5\xf2\x8b\x0b\x6d\x6a\x80\x78\x47\xf1\x53\xd4\xaf\xe9\x5d\x9c\x79\xc1\x08\xee\x98\x17\xb8\x9f\xff\x97\xe4\x94\xfa\x11\x24\x05\x97\x59\xd4\x3f\x07\xf8\x08\x16\x63\x51\xdb\x7a\x5f\xfd\xdb\x57\x85\xe5\x4a\x9a\xaf\x64\x6b\x40\x54\x51\x1d\x70\xdd\x9c\x3c\x49\xb9\xa0\x13\x71\xe0\x8f\x3e\xfb\xd3\x71\x4d\xfb\xf5\xb0\x5c\x1a\x8b\x42\x9c\x21\xbb\x5b\x15\x9a\x52\xfe\x7a\x06\xbe\x1c\x7f\xf6\xff\xfc\x56\xec\x84\x52\x2c\x85\xfd\xf6\x26\x1e\xcf\xb1\x23\x51\x5f\xda\x29\x79\x34\x0e\x87\x4b\x3f\x58\xf9\x8b\xf9\x7b\x62\xfe\xb1\x5e\xec\x43\xac\xa4\xa4\xd8\x1a\xb0\x0a\xb0\xb1\x4c\x2c\x4a\x63\x49\x5f\x1c\xa3\x0f\x86\x44\x95\x6a\x54\x4e\x8d\xaf\xde\xe4\x38\x2f\x9a\xa3\x19\x53\xad\x72\xe7\xb8\xab\xd9\xa8\x0d\x99\x2a\xe3\xb0\x05\x0d\xfc\x12\x2e\xe6\xa0\xf4\xd1\xa2\x30\xe5\x92\x20\xd0\xca\xaa\x58\x89\x37\x20\x2f\x9a\xdb\x0b\x90\x33\x7f\x3b\xc0\x2d\xda\x78\x47\xa6\x2a\xd0\x70\x31\x9b\x0d\xe6\xa3\x90\x79\xab\x80\x79\x8f\x70\xc5\xac\x53\x6e\x6c\x05\xd9\x9a\x22\x76\x87\x16\x5e\xb8\x10\xb0\xa5\xa6\x1c\x94\x40\xaa\xb4\xab\xa3\x29\x73\x2e\x33\xe6\x2d\x43\xe6\x2d\xc7\x2d\xfc\xae\x26\x07\x9a\xcb\x9a\xa2\x59\x85\x7a\xb1\xd4\xe8\x74\xdf\x89\xf3\xd6\xef\x43\x17\xa9\x50\x5a\xbb\xc1\xec\xa5\xc5\xd7\x4e\x90\x0e\x3f\x1f\x50\xd0\x9e\xea\xc6\x0d\xe0\x33\x72\x81\x5b\x41\x9d\x38\x47\xc7\xb2\xd0\xfd\xb9\xa2\x1f\x26\xec\xa1\x11\x57\xf6\x35\x26\x0d\xad\x2a\xa0\xad\xcd\xce\x0d\xe7\xf6\x1b\xaa\x62\x5f\x31\x5c\xbc\x04\x5b\x2e\x51\xef\xdd\x19\xdc\x62\x30\x58\x4d\x6e\x20\xd6\x84\x96\x00\x21\x47\x59\xa2\x80\x02\x33\x02\x94\x80\xcc\x90\x7e\xe6\x31\x81\x9b\x0e\x27\xca\x70\x02\x8b\xca\x39\x6d\x71\xfc\xe7\x04\x63\x2b\xd7\x44\xae\x29\xb6\x4a\xef\x5d\x23\x2c\x72\xc9\x65\xd6\xd1\x97\x8a\x31\x4a\xd7\xc3\x0b\x53\x7a\x56\xe5\xf5\x0d\xbb\x2a\xe0\x8e\x90\x20\xe5\x4a\xf2\xbf\xe8\xac\xe4\x17\x45\xe0\x12\xea\x2c\xc8\x55\xd2\xdd\x34\x87\x64\xf6\x46\xa8\x5a\x3e\x7f\x38\xef\x80\x50\x19\xe4\x64\x0c\x66\x54\x79\xa7\x4e\x80\x4f\xc7\x58\x25\x79\x14\x46\x39\xdd\x3b\xbf\x59\x92\x55\xa2\x4d\x54\x69\xbf\xbb\xca\x24\x54\x26\xe8\x99\xc4\xa9\x70\xd3\xf1\xef\xe3\x69\x7d\x03\xb2\x8e\x38\x73\x75\xaa\x92\xe0\x13\x97\xa9\xba\x81\x84\xb6\x65\x76\x03\x2f\xa8\xe5\x0d\x90\xd6\x4a\xbf\x4b\xd0\x9e\xf0\xd3\xc5\xcf\x87\x09\x7f\xe5\x72\x4d\x06\x38\x55\x11\x26\xa0\xd2\xe6\x1a\x57\x49\xde\x7b\x46\x1a\x12\x84\xc0\x1f\x5d\xc8\xe9\xdc\x72\x57\x9f\x0a\xe6\xd7\xe2\xae\xd5\x51\xe7\xb5\x14\xe9\x88\xce\xf5\xe8\x6f\x6e\xc9\xc6\xb7\xed\xce\xdf\x5e\x13\xd3\xf0\xad\xf8\xce\xc1\x07\xbf\xad\x26\x8b\x65\xc8\x42\xfb\xcf\xdf\xc5\x0e\x25\xc1\x0c\xb5\xe5\xd2\x63\xff\x06\x00\x00\xff\xff\x8c\x20\xf9\x48\xd9\x09\x00\x00")

func docsKafka2influxdb1Bytes() ([]byte, error) {
	return bindataRead(
		_docsKafka2influxdb1,
		"docs/kafka2influxdb.1",
	)
}

func docsKafka2influxdb1() (*asset, error) {
	bytes, err := docsKafka2influxdb1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/kafka2influxdb.1", size: 2521, mode: os.FileMode(436), modTime: time.Unix(1491240091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kafka2influxdb.service": kafka2influxdbService,
	"kafka2influxdb.upstart": kafka2influxdbUpstart,
	"kafka2influxdb.default": kafka2influxdbDefault,
	"docs/kafka2influxdb.1": docsKafka2influxdb1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"kafka2influxdb.1": &bintree{docsKafka2influxdb1, map[string]*bintree{}},
	}},
	"kafka2influxdb.default": &bintree{kafka2influxdbDefault, map[string]*bintree{}},
	"kafka2influxdb.service": &bintree{kafka2influxdbService, map[string]*bintree{}},
	"kafka2influxdb.upstart": &bintree{kafka2influxdbUpstart, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

